snippet main
	package main
	
	func main() {
	}
# append
snippet ap
	append(${1:slice}, ${2:value})
# case
snippet cs
	case ${1:value}:
		${2:/* code */}
# constants with iota
snippet co
	const (
		${1:NAME1} = iota
		${2:NAME2}
	)
# defer recover
snippet dfr
	defer func() {
		if err := recover(); err != nil {
			${1:/* code */}
		}
	}()
# import 
snippet im
	import (
		"${1:package}" 
	)
# full interface snippet 
snippet inf
	interface ${1:name} {
		${2:/* methods */}
	}${3}
# if condition
snippet if
	if ${1:/* condition */} {
		${2:/* code */}
	}
# error snippet
snippet ir
	if err != nil {
		return err
	}
	${1}
# if else
snippet ie
	if ${1:/* condition */} {
		${2:/* code */}
	} else {
		${3}
	}
# for loop
snippet fo
	for ${2:i} = 0; $2 < ${1:count}; $2${3:++} {
		${4:/* code */}
	}
# for range loop
snippet fr
	for ${1:k}, ${2:v} := range ${3} {
		${4:/* code */}
	}
# function simple 
snippet fun
	func ${1:funcName}(${2}) ${3:os.Error} {
		${4:/* code */}
	}
# function on receiver 
snippet fum
	func (self ${1:type}) ${2:funcName}(${3}) ${4:os.Error} {
		${5:/* code */}
	}
# print
snippet pr
	fmt.Printf("${1:%s}\n", ${2:var})${3}
# select
snippet sl
	select {
	case ${1:v1} := <-${2:chan1}
		${3:/* code */}
	case ${4:v2} := <-${5:chan2}
		${6:/* code */}
	default:
		${7:/* code */}
	}
# switch 
snippet sw
	switch ${1:var} {
	case ${2:value1}:
		${3:/* code */}
	case ${4:value2}:
		${5:/* code */}
	default:
		${6:/* code */}
	}
snippet sp
	fmt.Sprintf("${1:%s}", ${2:var})${3}
